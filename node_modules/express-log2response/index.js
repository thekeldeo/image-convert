// Generated by CoffeeScript 1.8.0
(function() {
  var logsToHtml,
    __hasProp = {}.hasOwnProperty;

  logsToHtml = function(logs, defaultCss, callback) {
    var log, output, _fn, _i, _len;
    output = '<script type="text/javascript">';
    _fn = function(log) {
      log = {
        input: log,
        css: defaultCss
      };
      callback(log);
      return output += typeof log.input !== "object" ? "console.log('%c ' + " + (JSON.stringify(log.input)) + ", '" + log.css + "');" : "console.log(" + (JSON.stringify(log.input)) + ");";
    };
    for (_i = 0, _len = logs.length; _i < _len; _i++) {
      log = logs[_i];
      _fn(log);
    }
    return output += '</script>';
  };

  module.exports = function(options) {
    var key, option, _options;
    if (options == null) {
      options = {};
    }
    _options = {
      css: 'background: #222; color: lightgreen;',
      logCallback: function() {},
      sendCallback: function() {}
    };
    for (key in options) {
      if (!__hasProp.call(options, key)) continue;
      option = options[key];
      _options[key] = options[key];
    }
    options = _options;
    return function(req, res, next) {
      var _send;
      res.log = function(input) {
        return res.log.stack.push(input);
      };
      res.log.stack = [];
      _send = res.send;
      res.send = function() {
        var isHtml, text, type;
        type = this.get('content-type');
        isHtml = ((type != null) && (type.indexOf('html')) !== -1) || ((type == null) && typeof arguments[0] === 'string');
        if (isHtml) {
          options.sendCallback(req, res);
          text = arguments[0];
          text += logsToHtml(res.log.stack, options.css, options.logCallback);
          arguments[0] = text;
        }
        return _send.apply(res, arguments);
      };
      return next();
    };
  };

}).call(this);

//# sourceMappingURL=index.js.map
